"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PugPrinter = void 0;
const prettier_1 = require("prettier");
const util_1 = require("util");
const doctype_shortcut_registry_1 = require("./doctype-shortcut-registry");
const logger_1 = require("./logger");
const utils_1 = require("./options/attribute-sorting/utils");
const utils_2 = require("./options/empty-attributes/utils");
const pug_attribute_separator_1 = require("./options/pug-attribute-separator");
const pug_comment_preserve_spaces_1 = require("./options/pug-comment-preserve-spaces");
const angular_1 = require("./utils/angular");
const common_1 = require("./utils/common");
const script_mime_types_1 = require("./utils/script-mime-types");
const svelte_1 = require("./utils/svelte");
const vue_1 = require("./utils/vue");
const logger = (0, logger_1.createLogger)(console);
if (process.env.NODE_ENV === 'test') {
    logger.setLogLevel(logger_1.LogLevel.DEBUG);
}
class PugPrinter {
    constructor(content, tokens, options) {
        var _a, _b, _c, _d, _e;
        this.content = content;
        this.tokens = tokens;
        this.options = options;
        this.result = '';
        this.currentIndex = -1;
        this.currentLineLength = 0;
        this.indentLevel = 0;
        this.framework = 'auto';
        this.currentTagPosition = 0;
        this.possibleIdPosition = 0;
        this.possibleClassPosition = 0;
        this.previousAttributeRemapped = false;
        this.wrapAttributes = false;
        this.pipelessText = false;
        this.pipelessComment = false;
        this.currentlyInPugInterpolation = false;
        this.classLiteralToAttribute = [];
        this.indentString = options.pugUseTabs ? '\t' : ' '.repeat(options.pugTabWidth);
        if (options.pugSingleFileComponentIndentation) {
            this.indentLevel++;
        }
        this.framework = options.pugFramework !== 'auto' ? options.pugFramework : (0, common_1.detectFramework)();
        this.quotes = this.options.pugSingleQuote ? "'" : '"';
        this.otherQuotes = this.options.pugSingleQuote ? '"' : "'";
        const pugAttributeSeparator = (0, pug_attribute_separator_1.resolvePugAttributeSeparatorOption)(options.pugAttributeSeparator);
        this.alwaysUseAttributeSeparator = pugAttributeSeparator === 'always';
        this.neverUseAttributeSeparator = pugAttributeSeparator === 'none';
        const wrapAttributesPattern = options.pugWrapAttributesPattern;
        this.wrapAttributesPattern = wrapAttributesPattern ? new RegExp(wrapAttributesPattern) : null;
        const codeSingleQuote = !options.pugSingleQuote;
        this.codeInterpolationOptions = {
            singleQuote: codeSingleQuote,
            bracketSpacing: (_a = options.pugBracketSpacing) !== null && _a !== void 0 ? _a : options.bracketSpacing,
            arrowParens: (_b = options.pugArrowParens) !== null && _b !== void 0 ? _b : options.arrowParens,
            printWidth: 9000,
            endOfLine: 'lf',
            useTabs: (_c = options.pugUseTabs) !== null && _c !== void 0 ? _c : options.useTabs,
            tabWidth: (_d = options.pugTabWidth) !== null && _d !== void 0 ? _d : options.tabWidth,
            bracketSameLine: (_e = options.pugBracketSameLine) !== null && _e !== void 0 ? _e : options.bracketSameLine
        };
    }
    get computedIndent() {
        var _a;
        switch ((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) {
            case 'newline':
            case 'outdent':
                return this.indentString.repeat(this.indentLevel);
            case 'indent':
                return this.indentString;
            case 'start-pug-interpolation':
                return '';
        }
        return this.options.pugSingleFileComponentIndentation ? this.indentString : '';
    }
    get previousToken() {
        return this.tokens[this.currentIndex - 1];
    }
    get nextToken() {
        return this.tokens[this.currentIndex + 1];
    }
    build() {
        var _a, _b;
        if (logger.isDebugEnabled()) {
            logger.debug('[PugPrinter]:', JSON.stringify(this.tokens));
        }
        const results = [];
        if (((_a = this.tokens[0]) === null || _a === void 0 ? void 0 : _a.type) === 'text') {
            results.push('| ');
        }
        else if (((_b = this.tokens[0]) === null || _b === void 0 ? void 0 : _b.type) === 'eos') {
            return '';
        }
        let token = this.getNextToken();
        while (token) {
            logger.debug('[PugPrinter]:', JSON.stringify(token));
            try {
                switch (token.type) {
                    case 'attribute':
                    case 'class':
                    case 'end-attributes':
                    case 'id':
                    case 'eos':
                        this.result = results.join('');
                        this[token.type](token);
                        results.length = 0;
                        results.push(this.result);
                        break;
                    case 'tag':
                    case 'start-attributes':
                    case 'interpolation':
                    case 'call':
                    case ':':
                        this.result = results.join('');
                    default: {
                        if (typeof this[token.type] !== 'function') {
                            throw new Error('Unhandled token: ' + JSON.stringify(token));
                        }
                        results.push(this[token.type](token));
                        break;
                    }
                }
            }
            catch (error) {
                throw new Error(error);
            }
            token = this.getNextToken();
        }
        return results.join('');
    }
    getNextToken() {
        var _a;
        this.currentIndex++;
        return (_a = this.tokens[this.currentIndex]) !== null && _a !== void 0 ? _a : null;
    }
    quoteString(val) {
        return `${this.quotes}${val}${this.quotes}`;
    }
    checkTokenType(token, possibilities, invert = false) {
        return !!token && possibilities.includes(token.type) !== invert;
    }
    tokenNeedsSeparator(token) {
        return this.neverUseAttributeSeparator
            ? false
            : this.alwaysUseAttributeSeparator || /^(\(|\[|:).*/.test(token.name);
    }
    getUnformattedContentLines(firstToken, lastToken) {
        const { start } = firstToken.loc;
        const { end } = lastToken.loc;
        const lines = this.content.split(/\r\n|\n|\r/);
        const startLine = start.line - 1;
        const endLine = end.line - 1;
        const parts = [];
        const firstLine = lines[startLine];
        if (firstLine !== undefined) {
            parts.push(firstLine.slice(start.column - 1));
        }
        for (let lineNumber = startLine + 1; lineNumber < endLine; lineNumber++) {
            const line = lines[lineNumber];
            if (line !== undefined) {
                parts.push(line);
            }
        }
        const lastLine = lines[endLine];
        if (lastLine !== undefined) {
            parts.push(lastLine.slice(0, end.column - 1));
        }
        return parts;
    }
    replaceTagWithLiteralIfPossible(search, replace) {
        if (this.options.pugExplicitDiv) {
            return;
        }
        const currentTagEnd = Math.max(this.possibleIdPosition, this.possibleClassPosition);
        const tag = this.result.slice(this.currentTagPosition, currentTagEnd);
        const replaced = tag.replace(search, replace);
        if (replaced !== tag) {
            const prefix = this.result.slice(0, this.currentTagPosition);
            const suffix = this.result.slice(currentTagEnd);
            this.result = `${prefix}${replaced}${suffix}`;
            const diff = tag.length - replaced.length;
            this.possibleIdPosition -= diff;
            this.possibleClassPosition -= diff;
        }
    }
    frameworkFormat(code) {
        const options = { ...this.codeInterpolationOptions };
        switch (this.framework) {
            case 'angular':
                options.parser = '__ng_interpolation';
                break;
            case 'svelte':
            case 'vue':
            default:
                options.parser = 'babel';
                options.semi = false;
        }
        let result = (0, prettier_1.format)(code, options);
        if (result[0] === ';') {
            result = result.slice(1);
        }
        return result;
    }
    formatText(text) {
        let result = '';
        while (text) {
            const start = text.indexOf('{{');
            if (start !== -1) {
                result += text.slice(0, start);
                text = text.slice(start + 2);
                const end = text.indexOf('}}');
                if (end !== -1) {
                    let code = text.slice(0, end);
                    try {
                        const dangerousQuoteCombination = (0, common_1.detectDangerousQuoteCombination)(code, this.quotes, this.otherQuotes, logger);
                        if (dangerousQuoteCombination) {
                            logger.warn('The following expression could not be formatted correctly. Please try to fix it yourself and if there is a problem, please open a bug issue:', code);
                            result += (0, common_1.handleBracketSpacing)(this.options.pugBracketSpacing, code);
                            text = text.slice(end + 2);
                            continue;
                        }
                        else {
                            code = this.frameworkFormat(code);
                        }
                    }
                    catch (error) {
                        if (typeof error === 'string') {
                            if (error.includes('Unexpected token Lexer Error')) {
                                if (!error.includes('Unexpected character [`]')) {
                                    logger.debug('[PugPrinter:formatText]: Using fallback strategy');
                                }
                            }
                            else if (error.includes('Bindings cannot contain assignments')) {
                                logger.warn('[PugPrinter:formatText]: Bindings should not contain assignments:', `code: \`${code.trim()}\``);
                            }
                            else if (error.includes("Unexpected token '('")) {
                                if (this.framework !== 'vue') {
                                    logger.warn('[PugPrinter:formatText]: Found unexpected token `(`.', `code: \`${code.trim()}\``);
                                }
                            }
                            else if (error.includes('Missing expected `)`')) {
                                if (this.framework !== 'vue') {
                                    logger.warn('[PugPrinter:formatText]: Missing expected `)`.', `code: \`${code.trim()}\``);
                                }
                            }
                            else if (error.includes('Missing expected `:`')) {
                                if (this.framework !== 'vue') {
                                    logger.warn('[PugPrinter:formatText]: Missing expected `:`.', `code: \`${code.trim()}\``);
                                }
                            }
                            else {
                                logger.warn('[PugPrinter:formatText]: ', error);
                            }
                        }
                        else {
                            logger.warn('[PugPrinter:formatText]: ', error);
                        }
                        try {
                            code = (0, prettier_1.format)(code, {
                                parser: 'babel',
                                ...this.codeInterpolationOptions,
                                semi: false
                            });
                            if (code[0] === ';') {
                                code = code.slice(1);
                            }
                        }
                        catch (error) {
                            logger.warn(error);
                        }
                    }
                    code = (0, common_1.unwrapLineFeeds)(code);
                    result += (0, common_1.handleBracketSpacing)(this.options.pugBracketSpacing, code);
                    text = text.slice(end + 2);
                }
                else {
                    result += '{{';
                    result += text;
                    text = '';
                }
            }
            else {
                const start2 = text.indexOf('{');
                if (this.options.pugFramework === 'svelte' && start2 !== -1) {
                    result += text.slice(0, start2);
                    text = text.slice(start2 + 1);
                    const end2 = text.indexOf('}');
                    if (end2 !== -1) {
                        let code = text.slice(0, end2);
                        try {
                            const dangerousQuoteCombination = (0, common_1.detectDangerousQuoteCombination)(code, this.quotes, this.otherQuotes, logger);
                            if (dangerousQuoteCombination) {
                                logger.warn('The following expression could not be formatted correctly. Please try to fix it yourself and if there is a problem, please open a bug issue:', code);
                                result += (0, common_1.handleBracketSpacing)(this.options.pugBracketSpacing, code);
                                text = text.slice(end2 + 1);
                                continue;
                            }
                            else {
                                code = this.frameworkFormat(code);
                            }
                        }
                        catch (error) {
                            logger.warn('[PugPrinter:formatText]: ', error);
                            try {
                                code = (0, prettier_1.format)(code, {
                                    parser: 'babel',
                                    ...this.codeInterpolationOptions,
                                    semi: false
                                });
                                if (code[0] === ';') {
                                    code = code.slice(1);
                                }
                            }
                            catch (error) {
                                logger.warn(error);
                            }
                        }
                        code = (0, common_1.unwrapLineFeeds)(code);
                        result += (0, common_1.handleBracketSpacing)(this.options.pugBracketSpacing, code, ['{', '}']);
                        text = text.slice(end2 + 1);
                    }
                    else {
                        result += '{';
                        result += text;
                        text = '';
                    }
                }
                else {
                    result += text;
                    text = '';
                }
            }
        }
        return result;
    }
    formatDelegatePrettier(val, parser, { trimTrailingSemicolon = false } = {}) {
        val = val.trim();
        const wasQuoted = (0, common_1.isQuoted)(val);
        if (wasQuoted) {
            val = val.slice(1, -1);
        }
        val = (0, prettier_1.format)(val, { parser, ...this.codeInterpolationOptions });
        if (this.quotes === '"') {
            val = val.replace(/"/g, '\\"');
        }
        else {
            val = val.replace(/'/g, "\\'");
        }
        val = (0, common_1.unwrapLineFeeds)(val);
        if (trimTrailingSemicolon && val[val.length - 1] === ';') {
            val = val.slice(0, -1);
        }
        return wasQuoted ? this.quoteString(val) : val;
    }
    formatStyleAttribute(val) {
        return this.formatDelegatePrettier(val, 'css', { trimTrailingSemicolon: true });
    }
    formatVueEventBinding(val) {
        return this.formatDelegatePrettier(val, '__vue_event_binding', { trimTrailingSemicolon: true });
    }
    formatVueExpression(val) {
        return this.formatDelegatePrettier(val, '__vue_expression');
    }
    formatAngularBinding(val) {
        return this.formatDelegatePrettier(val, '__ng_binding');
    }
    formatAngularAction(val) {
        return this.formatDelegatePrettier(val, '__ng_action');
    }
    formatAngularDirective(val) {
        return this.formatDelegatePrettier(val, '__ng_directive');
    }
    formatFrameworkInterpolation(val, parser, [opening, closing]) {
        val = val.slice(1, -1);
        val = val.slice(opening.length, -closing.length);
        val = val.trim();
        if (val.includes(`\\${this.otherQuotes}`)) {
            logger.warn('The following expression could not be formatted correctly. Please try to fix it yourself and if there is a problem, please open a bug issue:', val);
        }
        else {
            val = (0, prettier_1.format)(val, { parser, ...this.codeInterpolationOptions });
            val = (0, common_1.unwrapLineFeeds)(val);
        }
        val = (0, common_1.handleBracketSpacing)(this.options.pugBracketSpacing, val, [opening, closing]);
        return this.quoteString(val);
    }
    formatAngularInterpolation(val) {
        return this.formatFrameworkInterpolation(val, '__ng_interpolation', ['{{', '}}']);
    }
    formatSvelteInterpolation(val) {
        return this.formatFrameworkInterpolation(val, '__ng_interpolation', ['{', '}']);
    }
    tag(token) {
        let val = token.val;
        if (val === 'div' &&
            !this.options.pugExplicitDiv &&
            this.nextToken &&
            (this.nextToken.type === 'class' || this.nextToken.type === 'id')) {
            val = '';
        }
        this.currentLineLength += val.length;
        const result = `${this.computedIndent}${val}`;
        logger.debug('tag', { result, val: token.val, length: token.val.length }, this.currentLineLength);
        this.currentTagPosition = this.result.length + this.computedIndent.length;
        this.possibleIdPosition = this.result.length + result.length;
        this.possibleClassPosition = this.result.length + result.length;
        return result;
    }
    ['start-attributes'](token) {
        var _a, _b, _c;
        let result = '';
        if (((_a = this.nextToken) === null || _a === void 0 ? void 0 : _a.type) === 'attribute') {
            this.previousAttributeRemapped = false;
            this.possibleClassPosition = this.result.length;
            result = '(';
            logger.debug(this.currentLineLength);
            let tempToken = this.nextToken;
            let tempIndex = this.currentIndex + 1;
            let hasLiteralAttributes = false;
            let numNormalAttributes = 0;
            while (tempToken.type === 'attribute') {
                if (!this.currentlyInPugInterpolation &&
                    !this.wrapAttributes &&
                    ((_b = this.wrapAttributesPattern) === null || _b === void 0 ? void 0 : _b.test(tempToken.name))) {
                    this.wrapAttributes = true;
                }
                switch (tempToken.name) {
                    case 'class':
                    case 'id': {
                        hasLiteralAttributes = true;
                        const val = tempToken.val.toString();
                        if ((0, common_1.isQuoted)(val)) {
                            this.currentLineLength -= 2;
                        }
                        this.currentLineLength += 1 + val.length;
                        logger.debug({ tokenName: tempToken.name, length: tempToken.name.length }, this.currentLineLength);
                        break;
                    }
                    default: {
                        this.currentLineLength += tempToken.name.length;
                        if (numNormalAttributes > 0) {
                            this.currentLineLength += 1;
                            if (this.tokenNeedsSeparator(tempToken)) {
                                this.currentLineLength += 1;
                            }
                        }
                        logger.debug({ tokenName: tempToken.name, length: tempToken.name.length }, this.currentLineLength);
                        const val = tempToken.val.toString();
                        if (val.length > 0 && val !== 'true') {
                            this.currentLineLength += 1 + val.length;
                            logger.debug({ tokenVal: val, length: val.length }, this.currentLineLength);
                        }
                        numNormalAttributes++;
                        break;
                    }
                }
                tempToken = this.tokens[++tempIndex];
            }
            logger.debug('after token', this.currentLineLength);
            if (hasLiteralAttributes) {
                if (((_c = this.previousToken) === null || _c === void 0 ? void 0 : _c.type) === 'tag' &&
                    this.previousToken.val === 'div' &&
                    !this.options.pugExplicitDiv) {
                    this.currentLineLength -= 3;
                }
            }
            if (numNormalAttributes > 0) {
                this.currentLineLength += 2;
            }
            logger.debug(this.currentLineLength);
            if (!this.currentlyInPugInterpolation &&
                !this.wrapAttributes &&
                (this.currentLineLength > this.options.pugPrintWidth ||
                    (this.options.pugWrapAttributesThreshold >= 0 &&
                        numNormalAttributes > this.options.pugWrapAttributesThreshold))) {
                this.wrapAttributes = true;
            }
            if (this.options.pugSortAttributes !== 'as-is' ||
                this.options.pugSortAttributesEnd.length > 0 ||
                this.options.pugSortAttributesBeginning.length > 0) {
                const startAttributesIndex = this.tokens.indexOf(token);
                const endAttributesIndex = tempIndex;
                if (endAttributesIndex - startAttributesIndex > 2) {
                    this.tokens = (0, utils_1.partialSort)(this.tokens, startAttributesIndex + 1, endAttributesIndex, (a, b) => (0, utils_1.compareAttributeToken)(a, b, this.options.pugSortAttributes, this.options.pugSortAttributesBeginning, this.options.pugSortAttributesEnd));
                }
            }
        }
        return result;
    }
    attribute(token) {
        var _a, _b;
        (0, utils_2.formatEmptyAttribute)(token, this.options.pugEmptyAttributes, this.options.pugEmptyAttributesForceQuotes);
        if (typeof token.val === 'string') {
            if ((0, common_1.isQuoted)(token.val) && token.val[0] !== '`') {
                if (token.name === 'class' && this.options.pugClassNotation === 'literal') {
                    const val = token.val.slice(1, -1).trim();
                    const classes = val.split(/\s+/);
                    const specialClasses = [];
                    const normalClasses = [];
                    const validClassNameRegex = /^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/;
                    for (const className of classes) {
                        if (!validClassNameRegex.test(className)) {
                            specialClasses.push(className);
                        }
                        else {
                            normalClasses.push(className);
                        }
                    }
                    if (normalClasses.length > 0) {
                        const position = this.possibleClassPosition;
                        this.result = [
                            this.result.slice(0, position),
                            '.',
                            normalClasses.join('.'),
                            this.result.slice(position)
                        ].join('');
                        this.possibleClassPosition += 1 + normalClasses.join('.').length;
                        this.replaceTagWithLiteralIfPossible(/div\./, '.');
                    }
                    if (specialClasses.length > 0) {
                        token.val = (0, common_1.makeString)(specialClasses.join(' '), this.quotes);
                        this.previousAttributeRemapped = false;
                    }
                    else {
                        this.previousAttributeRemapped = true;
                        return;
                    }
                }
                else if (token.name === 'id' && this.options.pugIdNotation !== 'as-is') {
                    let val = token.val;
                    val = val.slice(1, -1);
                    val = val.trim();
                    const validIdNameRegex = /^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/;
                    if (!validIdNameRegex.test(val)) {
                        val = (0, common_1.makeString)(val, this.quotes);
                        this.result += 'id';
                        if (token.mustEscape === false) {
                            this.result += '!';
                        }
                        this.result += `=${val}`;
                        return;
                    }
                    const position = this.possibleIdPosition;
                    const literal = `#${val}`;
                    this.result = [this.result.slice(0, position), literal, this.result.slice(position)].join('');
                    this.possibleClassPosition += literal.length;
                    this.replaceTagWithLiteralIfPossible(/div#/, '#');
                    this.previousAttributeRemapped = true;
                    return;
                }
            }
        }
        const hasNormalPreviousToken = (0, common_1.previousNormalAttributeToken)(this.tokens, this.currentIndex);
        if (((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) === 'attribute' && (!this.previousAttributeRemapped || hasNormalPreviousToken)) {
            if (this.tokenNeedsSeparator(token)) {
                this.result += ',';
            }
            if (!this.wrapAttributes) {
                this.result += ' ';
            }
        }
        this.previousAttributeRemapped = false;
        if (this.wrapAttributes) {
            this.result += '\n';
            this.result += this.indentString.repeat(this.indentLevel + 1);
        }
        this.result += `${token.name}`;
        if (typeof token.val === 'boolean') {
            if (token.val !== true) {
                this.result += `=${token.val}`;
            }
        }
        else if (token.name === 'class' && this.options.pugClassNotation === 'attribute') {
            const val = (0, common_1.isQuoted)(token.val) ? token.val.slice(1, -1).trim() : token.val;
            const classes = val.split(/\s+/);
            if (this.classLiteralToAttribute.length) {
                for (let i = this.classLiteralToAttribute.length - 1; i > -1; i--) {
                    const className = this.classLiteralToAttribute.splice(i, 1)[0];
                    if (className) {
                        classes.unshift(className);
                    }
                }
            }
            this.result += `=${(0, common_1.isQuoted)(token.val) ? this.quoteString(classes.join(' ')) : classes.join(' ')}`;
        }
        else {
            let val = token.val;
            if ((0, common_1.isMultilineInterpolation)(val)) {
            }
            else if ((0, common_1.isSingleLineWithInterpolation)(val)) {
            }
            else if ((0, vue_1.isVueVForWithOf)(token.name, val)) {
                val = this.formatDelegatePrettier(val, 'vue');
            }
            else if ((0, vue_1.isVueExpression)(token.name)) {
                val = this.formatVueExpression(val);
            }
            else if ((0, vue_1.isVueEventBinding)(token.name)) {
                val = this.formatVueEventBinding(val);
            }
            else if ((0, vue_1.isVueVBindExpression)(token.name)) {
                val = this.formatDelegatePrettier(val, '__js_expression');
            }
            else if ((0, vue_1.isVueVOnExpression)(token.name)) {
                val = this.formatDelegatePrettier(val, '__js_expression');
            }
            else if ((0, angular_1.isAngularBinding)(token.name)) {
                val = this.formatAngularBinding(val);
            }
            else if ((0, angular_1.isAngularAction)(token.name)) {
                val = this.formatAngularAction(val);
            }
            else if ((0, angular_1.isAngularDirective)(token.name)) {
                val = this.formatAngularDirective(val);
            }
            else if ((0, angular_1.isAngularInterpolation)(val)) {
                val = this.formatAngularInterpolation(val);
            }
            else if ((0, svelte_1.isSvelteInterpolation)(val)) {
                val = this.formatSvelteInterpolation(val);
            }
            else if ((0, common_1.isStyleAttribute)(token.name, token.val)) {
                val = this.formatStyleAttribute(val);
            }
            else {
                const rightTrimmedVal = val.trimRight();
                if ((0, common_1.isQuoted)(rightTrimmedVal)) {
                    val = (0, common_1.makeString)(rightTrimmedVal.slice(1, -1), this.quotes);
                }
                else if (val === 'true') {
                    return;
                }
                else if (token.mustEscape) {
                    val = (0, prettier_1.format)(val, { parser: '__js_expression', ...this.codeInterpolationOptions });
                    const lines = val.split('\n');
                    const codeIndentLevel = this.wrapAttributes ? this.indentLevel + 1 : this.indentLevel;
                    if (lines.length > 1) {
                        val = (_b = lines[0]) !== null && _b !== void 0 ? _b : '';
                        for (let index = 1; index < lines.length; index++) {
                            val += '\n';
                            val += this.indentString.repeat(codeIndentLevel);
                            val += lines[index];
                        }
                    }
                }
                else {
                    val = val.trim();
                    val = val.replace(/\s\s+/g, ' ');
                    if (val[0] === '{' && val[1] === ' ') {
                        val = `{${val.slice(2, val.length)}`;
                    }
                }
            }
            if (token.mustEscape === false) {
                this.result += '!';
            }
            this.result += `=${val}`;
        }
    }
    ['end-attributes'](token) {
        var _a, _b, _c, _d, _e, _f;
        if (this.wrapAttributes && this.result[this.result.length - 1] !== '(') {
            if (!this.options.pugBracketSameLine) {
                this.result += '\n';
            }
            this.result += this.indentString.repeat(this.indentLevel);
        }
        this.wrapAttributes = false;
        if (this.classLiteralToAttribute.length) {
            if (((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) === 'start-attributes') {
                this.result += '(';
            }
            else if (((_b = this.previousToken) === null || _b === void 0 ? void 0 : _b.type) === 'attribute') {
                this.result += ' ';
            }
            const classes = this.classLiteralToAttribute.splice(0, this.classLiteralToAttribute.length);
            this.result += `class=${this.quoteString(classes.join(' '))}`;
            if (((_c = this.previousToken) === null || _c === void 0 ? void 0 : _c.type) === 'start-attributes') {
                this.result += ')';
            }
        }
        if (this.result[this.result.length - 1] === '(') {
            this.result = this.result.slice(0, -1);
        }
        else if (((_d = this.previousToken) === null || _d === void 0 ? void 0 : _d.type) === 'attribute') {
            if (this.options.pugBracketSameLine) {
                this.result = this.result.trimRight();
            }
            this.result += ')';
        }
        if (((_e = this.nextToken) === null || _e === void 0 ? void 0 : _e.type) === 'text' || ((_f = this.nextToken) === null || _f === void 0 ? void 0 : _f.type) === 'path') {
            this.result += ' ';
        }
    }
    indent(token) {
        const result = `\n${this.indentString.repeat(this.indentLevel)}`;
        this.indentLevel++;
        this.currentLineLength = result.length - 1 + 1 + this.options.pugTabWidth;
        logger.debug('indent', { result, indentLevel: this.indentLevel, pugTabWidth: this.options.pugTabWidth }, this.currentLineLength);
        return result;
    }
    outdent(token) {
        let result = '';
        if (this.previousToken && this.previousToken.type !== 'outdent') {
            if (token.loc.start.line - this.previousToken.loc.end.line > 1) {
                result += '\n';
            }
            result += '\n';
        }
        this.indentLevel--;
        this.currentLineLength = 1 + this.indentString.repeat(this.indentLevel).length;
        logger.debug('outdent', { result, indentLevel: this.indentLevel }, this.currentLineLength);
        return result;
    }
    class(token) {
        var _a, _b, _c, _d, _e, _f;
        if (this.options.pugClassNotation === 'attribute') {
            this.classLiteralToAttribute.push(token.val);
            if (((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) !== 'tag' && ((_b = this.previousToken) === null || _b === void 0 ? void 0 : _b.type) !== 'class') {
                this.result += 'div';
            }
            if (this.nextToken && ['text', 'newline', 'indent', 'eos'].includes((_c = this.nextToken) === null || _c === void 0 ? void 0 : _c.type)) {
                const classes = this.classLiteralToAttribute.splice(0, this.classLiteralToAttribute.length);
                this.result += `(class=${this.quoteString(classes.join(' '))})`;
                if (((_d = this.nextToken) === null || _d === void 0 ? void 0 : _d.type) === 'text') {
                    this.result += ' ';
                }
            }
        }
        else {
            const val = `.${token.val}`;
            this.currentLineLength += val.length;
            logger.debug('class', { val, length: val.length }, this.currentLineLength);
            switch ((_e = this.previousToken) === null || _e === void 0 ? void 0 : _e.type) {
                case undefined:
                case 'newline':
                case 'outdent':
                case 'indent': {
                    const optionalDiv = this.options.pugExplicitDiv ? 'div' : '';
                    const result = `${this.computedIndent}${optionalDiv}${val}`;
                    this.currentLineLength += optionalDiv.length;
                    this.possibleIdPosition = this.result.length + this.computedIndent.length + optionalDiv.length;
                    this.result += result;
                    this.possibleClassPosition = this.result.length;
                    break;
                }
                default: {
                    const prefix = this.result.slice(0, this.possibleClassPosition);
                    this.result = [prefix, val, this.result.slice(this.possibleClassPosition)].join('');
                    this.possibleClassPosition += val.length;
                    break;
                }
            }
            if (((_f = this.nextToken) === null || _f === void 0 ? void 0 : _f.type) === 'text') {
                this.currentLineLength += 1;
                this.result += ' ';
            }
        }
    }
    eos(token) {
        while (this.result[this.result.length - 1] === '\n') {
            this.result = this.result.slice(0, -1);
        }
        this.result += '\n';
    }
    comment(commentToken) {
        var _a;
        let result = this.computedIndent;
        if (/^ prettier-ignore($|[: ])/.test(commentToken.val)) {
            let token = this.getNextToken();
            if (token) {
                let skipNewline = token.type === 'newline';
                let ignoreLevel = 0;
                while (token) {
                    const { type } = token;
                    if (type === 'newline' && ignoreLevel === 0) {
                        if (skipNewline) {
                            skipNewline = false;
                        }
                        else {
                            break;
                        }
                    }
                    else if (type === 'indent') {
                        ignoreLevel++;
                    }
                    else if (type === 'outdent') {
                        ignoreLevel--;
                        if (ignoreLevel <= 0) {
                            if (ignoreLevel < 0) {
                                this.indentLevel--;
                            }
                            break;
                        }
                    }
                    token = this.getNextToken();
                }
                if (token) {
                    const lines = this.getUnformattedContentLines(commentToken, token);
                    const lastLine = lines.pop();
                    if (lastLine !== undefined) {
                        lines.push(lastLine.trimRight());
                    }
                    result += lines.join('\n');
                }
            }
        }
        else {
            if (this.checkTokenType(this.previousToken, ['newline', 'indent', 'outdent'], true)) {
                result += ' ';
            }
            result += '//';
            if (!commentToken.buffer) {
                result += '-';
            }
            result += (0, pug_comment_preserve_spaces_1.formatPugCommentPreserveSpaces)(commentToken.val, this.options.pugCommentPreserveSpaces);
            if (((_a = this.nextToken) === null || _a === void 0 ? void 0 : _a.type) === 'start-pipeless-text') {
                this.pipelessComment = true;
            }
        }
        return result;
    }
    newline(token) {
        let result = '';
        if (this.previousToken && token.loc.start.line - this.previousToken.loc.end.line > 1) {
            result += '\n';
        }
        result += '\n';
        this.currentLineLength = 1 + this.indentString.repeat(this.indentLevel).length;
        logger.debug('newline', { result, indentLevel: this.indentLevel }, this.currentLineLength);
        return result;
    }
    text(token) {
        var _a, _b, _c;
        let result = '';
        let val = token.val;
        let needsTrailingWhitespace = false;
        if (this.pipelessText) {
            switch ((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) {
                case 'newline':
                    if (val.trim().length > 0) {
                        result += this.indentString.repeat(this.indentLevel + 1);
                    }
                    break;
                case 'start-pipeless-text':
                    result += this.indentString;
                    break;
            }
            if (this.pipelessComment) {
                val = (0, pug_comment_preserve_spaces_1.formatPugCommentPreserveSpaces)(val, this.options.pugCommentPreserveSpaces, true);
            }
        }
        else {
            if (this.nextToken && val[val.length - 1] === ' ') {
                switch (this.nextToken.type) {
                    case 'interpolated-code':
                    case 'start-pug-interpolation':
                        needsTrailingWhitespace = true;
                        break;
                }
            }
            val = val.replace(/\s\s+/g, ' ');
            switch ((_b = this.previousToken) === null || _b === void 0 ? void 0 : _b.type) {
                case 'newline':
                    result += this.indentString.repeat(this.indentLevel);
                    if (/^ .+$/.test(val)) {
                        result += '|\n';
                        result += this.indentString.repeat(this.indentLevel);
                    }
                    result += '|';
                    if (/.*\S.*/.test(token.val) || ((_c = this.nextToken) === null || _c === void 0 ? void 0 : _c.type) === 'start-pug-interpolation') {
                        result += ' ';
                    }
                    break;
                case 'indent':
                case 'outdent':
                    result += this.computedIndent;
                    if (/^ .+$/.test(val)) {
                        result += '|\n';
                        result += this.indentString.repeat(this.indentLevel);
                    }
                    result += '|';
                    if (/.*\S.*/.test(token.val)) {
                        result += ' ';
                    }
                    break;
                case 'interpolated-code':
                case 'end-pug-interpolation':
                    if (/^ .+$/.test(val)) {
                        result += ' ';
                    }
                    break;
            }
            val = val.trim();
            val = this.formatText(val);
            val = val.replace(/#(\{|\[)/g, '\\#$1');
        }
        if (this.checkTokenType(this.previousToken, ['tag', 'id', 'interpolation', 'call', '&attributes', 'filter'])) {
            val = ` ${val}`;
        }
        result += val;
        if (needsTrailingWhitespace) {
            result += ' ';
        }
        return result;
    }
    ['interpolated-code'](token) {
        var _a;
        let result = '';
        switch ((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) {
            case 'tag':
            case 'class':
            case 'id':
            case 'end-attributes':
                result = ' ';
                break;
            case 'start-pug-interpolation':
                result = '| ';
                break;
            case 'indent':
            case 'newline':
            case 'outdent':
                result = this.computedIndent;
                result += this.pipelessText ? this.indentString : '| ';
                break;
        }
        result += token.mustEscape ? '#' : '!';
        result += (0, common_1.handleBracketSpacing)(this.options.pugBracketSpacing, token.val.trim(), ['{', '}']);
        return result;
    }
    code(token) {
        let result = this.computedIndent;
        if (!token.mustEscape && token.buffer) {
            result += '!';
        }
        result += token.buffer ? '=' : '-';
        let useSemi = this.options.pugSemi;
        if (useSemi && (token.mustEscape || token.buffer)) {
            useSemi = false;
        }
        let val = token.val;
        try {
            const valBackup = val;
            val = (0, prettier_1.format)(val, {
                parser: 'babel',
                ...this.codeInterpolationOptions,
                semi: useSemi,
                endOfLine: 'lf'
            });
            val = val.slice(0, -1);
            if (val[0] === ';') {
                val = val.slice(1);
            }
            if (val.includes('\n')) {
                val = valBackup;
            }
        }
        catch (error) {
            logger.warn('[PugPrinter]:', error);
        }
        result += ` ${val}`;
        return result;
    }
    id(token) {
        var _a;
        const val = `#${token.val}`;
        this.currentLineLength += val.length;
        switch ((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) {
            case undefined:
            case 'newline':
            case 'outdent':
            case 'indent': {
                const optionalDiv = this.options.pugExplicitDiv ? 'div' : '';
                const result = `${this.computedIndent}${optionalDiv}${val}`;
                this.currentLineLength += optionalDiv.length;
                this.result += result;
                this.possibleClassPosition = this.result.length;
                break;
            }
            default: {
                const prefix = this.result.slice(0, this.possibleIdPosition);
                this.possibleClassPosition += val.length;
                this.result = [prefix, val, this.result.slice(this.possibleIdPosition)].join('');
                break;
            }
        }
    }
    ['start-pipeless-text'](token) {
        var _a;
        this.pipelessText = true;
        let result = `\n${this.indentString.repeat(this.indentLevel)}`;
        if (((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) === 'dot') {
            const lastTagToken = (0, common_1.previousTagToken)(this.tokens, this.currentIndex);
            let parser;
            switch (lastTagToken === null || lastTagToken === void 0 ? void 0 : lastTagToken.val) {
                case 'script':
                    parser = (0, script_mime_types_1.getScriptParserName)((0, common_1.previousTypeAttributeToken)(this.tokens, this.currentIndex));
                    break;
                case 'style':
                    parser = 'css';
                    break;
                default:
                    break;
            }
            if (parser) {
                let index = this.currentIndex + 1;
                let tok = this.tokens[index];
                let rawText = '';
                let usedInterpolatedCode = false;
                while (tok && (tok === null || tok === void 0 ? void 0 : tok.type) !== 'end-pipeless-text') {
                    switch (tok.type) {
                        case 'text':
                            rawText += tok.val;
                            break;
                        case 'newline':
                            rawText += '\n';
                            break;
                        case 'interpolated-code':
                            usedInterpolatedCode = true;
                            rawText += tok.mustEscape ? '#' : '!';
                            rawText += `{${tok.val}}`;
                            break;
                        default:
                            logger.warn('[PugPrinter:start-pipeless-text]:', 'Unhandled token for pipeless script tag:', JSON.stringify(tok));
                            break;
                    }
                    index++;
                    tok = this.tokens[index];
                }
                try {
                    result = (0, prettier_1.format)(rawText, { parser, ...this.codeInterpolationOptions });
                }
                catch (error) {
                    if (!usedInterpolatedCode) {
                        logger.error(error);
                        throw error;
                    }
                    const warningContext = [
                        '[PugPrinter:start-pipeless-text]:',
                        'The following expression could not be formatted correctly.',
                        'This is likely a syntax error or an issue caused by the missing execution context.',
                        'If you think this is a bug, please open a bug issue.'
                    ];
                    warningContext.push(`\ncode: \`${rawText.trim()}\``);
                    warningContext.push('\nYou used interpolated code in your pipeless script tag, so you may ignore this warning.');
                    if (util_1.types.isNativeError(error)) {
                        warningContext.push(`\nFound ${parser} ${error.name}: ${error.message}.`);
                    }
                    else {
                        logger.debug('typeof error:', typeof error);
                        warningContext.push(`\nUnexpected error for parser ${parser}.`, error);
                    }
                    logger.warn(...warningContext);
                    result = rawText;
                }
                result = result.trimRight();
                const indentString = this.indentString.repeat(this.indentLevel + 1);
                result = result
                    .split('\n')
                    .map((line) => (line ? indentString + line : ''))
                    .join('\n');
                result = `\n${result}`;
                tok = this.tokens[index - 1];
                if ((tok === null || tok === void 0 ? void 0 : tok.type) === 'text' && tok.val === '') {
                    result += '\n';
                }
                this.currentIndex = index - 1;
            }
        }
        return result;
    }
    ['end-pipeless-text'](token) {
        this.pipelessText = false;
        this.pipelessComment = false;
        return '';
    }
    doctype(token) {
        let result = `${this.computedIndent}doctype`;
        if (token.val) {
            result += ` ${token.val}`;
        }
        return result;
    }
    dot(token) {
        return '.';
    }
    block(token) {
        let result = `${this.computedIndent}block `;
        if (token.mode !== 'replace') {
            result += `${token.mode} `;
        }
        result += token.val;
        return result;
    }
    extends(token) {
        const indent = this.options.pugSingleFileComponentIndentation ? this.indentString : '';
        return `${indent}extends `;
    }
    path(token) {
        let result = '';
        if (this.checkTokenType(this.previousToken, ['include', 'filter'])) {
            result += ' ';
        }
        result += token.val;
        return result;
    }
    ['start-pug-interpolation'](token) {
        var _a, _b;
        let result = '';
        if (((_a = this.tokens[this.currentIndex - 2]) === null || _a === void 0 ? void 0 : _a.type) === 'newline' &&
            ((_b = this.previousToken) === null || _b === void 0 ? void 0 : _b.type) === 'text' &&
            this.previousToken.val.trim().length === 0) {
            result += this.indentString.repeat(this.indentLevel + 1);
        }
        this.currentlyInPugInterpolation = true;
        result += '#[';
        return result;
    }
    ['end-pug-interpolation'](token) {
        this.currentlyInPugInterpolation = false;
        return ']';
    }
    interpolation(token) {
        const result = `${this.computedIndent}#{${token.val}}`;
        this.currentLineLength += result.length;
        this.possibleIdPosition = this.result.length + result.length;
        this.possibleClassPosition = this.result.length + result.length;
        return result;
    }
    include(token) {
        return `${this.computedIndent}include`;
    }
    filter(token) {
        return `${this.computedIndent}:${token.val}`;
    }
    call(token) {
        let result = `${this.computedIndent}+${token.val}`;
        let args = token.args;
        if (args) {
            args = args.trim();
            args = args.replace(/\s\s+/g, ' ');
            result += `(${args})`;
        }
        this.currentLineLength += result.length;
        this.possibleIdPosition = this.result.length + result.length;
        this.possibleClassPosition = this.result.length + result.length;
        return result;
    }
    mixin(token) {
        let result = `${this.computedIndent}mixin ${token.val}`;
        let args = token.args;
        if (args) {
            args = args.trim();
            args = args.replace(/\s\s+/g, ' ');
            result += `(${args})`;
        }
        return result;
    }
    if(token) {
        let result = this.computedIndent;
        const match = /^!\((.*)\)$/.exec(token.val);
        logger.debug('[PugPrinter]:', match);
        result += !match ? `if ${token.val}` : `unless ${match[1]}`;
        return result;
    }
    ['mixin-block'](token) {
        return `${this.computedIndent}block`;
    }
    else(token) {
        return `${this.computedIndent}else`;
    }
    ['&attributes'](token) {
        const result = `&attributes(${token.val})`;
        this.currentLineLength += result.length;
        return result;
    }
    ['text-html'](token) {
        const match = /^<(.*?)>(.*)<\/(.*?)>$/.exec(token.val);
        logger.debug('[PugPrinter]:', match);
        if (match) {
            return `${this.computedIndent}${match[1]} ${match[2]}`;
        }
        const entry = Object.entries(doctype_shortcut_registry_1.DOCTYPE_SHORTCUT_REGISTRY).find(([key]) => key === token.val.toLowerCase());
        if (entry) {
            return `${this.computedIndent}${entry[1]}`;
        }
        return `${this.computedIndent}${token.val}`;
    }
    each(token) {
        let result = `${this.computedIndent}each ${token.val}`;
        if (token.key !== null) {
            result += `, ${token.key}`;
        }
        result += ` in ${token.code}`;
        return result;
    }
    eachOf(token) {
        let value = token.value.trim();
        value = (0, prettier_1.format)(value, {
            parser: 'babel',
            ...this.codeInterpolationOptions,
            semi: false
        });
        if (value[0] === ';') {
            value = value.slice(1);
        }
        value = (0, common_1.unwrapLineFeeds)(value);
        const code = token.code.trim();
        return `${this.computedIndent}each ${value} of ${code}`;
    }
    while(token) {
        return `${this.computedIndent}while ${token.val}`;
    }
    case(token) {
        return `${this.computedIndent}case ${token.val}`;
    }
    when(token) {
        return `${this.computedIndent}when ${token.val}`;
    }
    [':'](token) {
        this.possibleIdPosition = this.result.length + 2;
        this.possibleClassPosition = this.result.length + 2;
        return ': ';
    }
    default(token) {
        return `${this.computedIndent}default`;
    }
    ['else-if'](token) {
        return `${this.computedIndent}else if ${token.val}`;
    }
    blockcode(token) {
        return `${this.computedIndent}-`;
    }
    yield(token) {
        return `${this.computedIndent}yield`;
    }
    slash(token) {
        var _a;
        let result = '/';
        if (((_a = this.nextToken) === null || _a === void 0 ? void 0 : _a.type) === 'text') {
            result += ' ';
        }
        return result;
    }
}
exports.PugPrinter = PugPrinter;
//# sourceMappingURL=data:application/json;base64,